;
; ***********************************************************************************
; * IXML_Autoexp.txt - advanced XML parser written in ANSI C++ for portability.     *
; * It works by using recursion and a node tree for breaking down the elements      *
; * of an XML document.  </P>                                                       *
; *                                                                                 *
; * @version     V3.12                                                              *
; * @author      Frank Vanden Berghen                                               *
; *                                                                                 *
; * Copyright (c) 2013, Frank Vanden Berghen - All rights reserved.                 *
; * See the file "AFPL-license.txt" about the licensing terms                       *
; *                                                                                 *
; ***********************************************************************************
;
; This file contains some really cool "tweaks" to apply on Visual Studio .NET 2005 debugger and above.
; These "tweaks" allows to easily visually inspect the contents of the XMLNode objects inside the debugger.
; Believe me, once you have seen inside the debugger the "smooth" display of the XMLNode objects, you cannot live without it anymore!
; This is a really BIG improvement of the usage of the XMLNode class inside the Visual Studio debugger!
; This way, it has never been so easy to manipulate large XML documents. I really love the Visual Studio Debugger!

; You should thanks Sabrina Wenig because she is the person that gave me the original idea for the "smooth" display of the 
; IXMLNode objects inside the debugger.

; The explanation required to make the cool "tweaks" follows (use at your own risk)!
; First read all the english comments of this file until the end and then proceed.

; Open inside notepad the file:
; %Visual Studio root dir%\Common7\Packages\Debugger\autoexp.dat
; ... and,search for a line that contains "[Visualizer]"
; just after this line,you include (copy/paste) the following lines:

; inside a code where IXMLStr is char* or wchar_t*, depending on _UNICODE preprocessor variable, use:

IXMLClear{
    preview (#( [$c.sOpenTag,s], [$c.sValue,s], [$c.sCloseTag,s] ))
}

IXMLAttribute{
    preview (#( [$c.sName,s], "=", [$c.sValue,s]))
}

ITCXMLNode::IXMLNodeDataTag{
    preview (
       #if ($c.pName == 0) ("root node")
       #elif ($c.isProcessInstruction== 0)
           (#(
               "<",[$c.pName,s],">, nChild=",$c.nChild,
               ", nAttr=",$c.nAttribute,", nText=",$c.nText,", nClear=",$c.nClear
           ))
       #else
           (#(
               "<?",[$c.pName,s],"?>, nAttr=",$c.nAttribute
           ))    
    )
    children (
        #(
;            [raw members]: [$c,!],
                      #array ( expr : $c.pChild[$i],     size : $c.nChild ),
          Attributes: #array ( expr : $c.pAttribute[$i], size : $c.nAttribute ),
          Text:       #array ( expr : $c.pText[$i],      size : $c.nText ),
          Clear:      #array ( expr : $c.pClear[$i],     size : $c.nClear ),
          #if ( $c.pParent != 0) 
          ( #(
              parent: *($c.pParent)
          ))
        )
    )
}

ITCXMLNode{
    preview (
       #if ($c.d == 0) ("emptyXMLNode")
       #elif ((*$c.d).pName == 0) ("root node")
       #elif ((*$c.d).isProcessInstruction== 0)
           (#(
               "<",[(*$c.d).pName,s],">, nChild=",(*$c.d).nChild,
               ", nAttr=",(*$c.d).nAttribute,", nText=",(*$c.d).nText,", nClear=",(*$c.d).nClear
           ))
       #else
           (#(
               "<?",[(*$c.d).pName,s],"?>, nAttr=",(*$c.d).nAttribute
           ))
    )
    children (
        #(
;          [raw members]: [(*$c.d),!],
                      #array ( expr : (*($c.d)).pChild[$i],     size : (*($c.d)).nChild ),
          Attributes: #array ( expr : (*($c.d)).pAttribute[$i], size : (*($c.d)).nAttribute ),
          Text:       #array ( expr : (*($c.d)).pText[$i],      size : (*($c.d)).nText ),
          Clear:      #array ( expr : (*($c.d)).pClear[$i],     size : (*($c.d)).nClear ),
           #if ( (*($c.d)).pParent != 0) 
           ( #(
              parent: *((*($c.d)).pParent)
           ))
        )
    )
}

; inside a code using IXMLStr == char*, use:

IXMLClear{
    preview (#( [$c.sOpenTag,sb], [$c.sValue,sb], [$c.sCloseTag,sb] ))
}

IXMLAttribute{
    preview (#( [$c.sName,sb], "=", [$c.sValue,sb]))
}

ITCXMLNode::IXMLNodeDataTag{
    preview (
       #if ($c.pName == 0) ("root node")
       #elif ($c.isProcessInstruction== 0)
           (#(
               "<",[$c.pName,sb],">, nChild=",$c.nChild,
               ", nAttr=",$c.nAttribute,", nText=",$c.nText,", nClear=",$c.nClear
           ))
       #else
           (#(
               "<?",[$c.pName,sb],"?>, nAttr=",$c.nAttribute
           ))    
    )
    children (
        #(
;            [raw members]: [$c,!],
                      #array ( expr : $c.pChild[$i],     size : $c.nChild ),
          Attributes: #array ( expr : $c.pAttribute[$i], size : $c.nAttribute ),
          Text:       #array ( expr : $c.pText[$i],      size : $c.nText ),
          Clear:      #array ( expr : $c.pClear[$i],     size : $c.nClear ),
          #if ( $c.pParent != 0) 
          ( #(
              parent: *($c.pParent)
          ))
        )
    )
}

ITCXMLNode{
    preview (
       #if ($c.d == 0) ("emptyXMLNode")
       #elif ((*$c.d).pName == 0) ("root node")
       #elif ((*$c.d).isProcessInstruction== 0)
           (#(
               "<",[(*$c.d).pName,sb],">, nChild=",(*$c.d).nChild,
               ", nAttr=",(*$c.d).nAttribute,", nText=",(*$c.d).nText,", nClear=",(*$c.d).nClear
           ))
       #else
           (#(
               "<?",[(*$c.d).pName,sb],"?>, nAttr=",(*$c.d).nAttribute
           ))
    )
    children (
        #(
;          [raw members]: [(*$c.d),!],
                      #array ( expr : (*($c.d)).pChild[$i],     size : (*($c.d)).nChild ),
          Attributes: #array ( expr : (*($c.d)).pAttribute[$i], size : (*($c.d)).nAttribute ),
          Text:       #array ( expr : (*($c.d)).pText[$i],      size : (*($c.d)).nText ),
          Clear:      #array ( expr : (*($c.d)).pClear[$i],     size : (*($c.d)).nClear ),
           #if ( (*($c.d)).pParent != 0) 
           ( #(
              parent: *((*($c.d)).pParent)
           ))
        )
    )
}

; inside a code using IXMLStr == wchar_t*, (unicode mode) use:

IXMLClear{
    preview (#( [$c.sOpenTag,sub], [$c.sValue,sub], [$c.sCloseTag,sub] ))
}

IXMLAttribute{
    preview (#( [$c.sName,su], "=", [$c.sValue,su]))
}

ITCXMLNode::IXMLNodeDataTag{
    preview (
       #if ($c.pName == 0) ("root node")
       #elif ($c.isProcessInstruction== 0)
           (#(
               "<",[$c.pName,sub],">, nChild=",$c.nChild,
               ", nAttr=",$c.nAttribute,", nText=",$c.nText,", nClear=",$c.nClear
           ))
       #else
           (#(
               "<?",[$c.pName,sub],"?>, nAttr=",$c.nAttribute
           ))    
    )
    children (
        #(
;            [raw members]: [$c,!],
                      #array ( expr : $c.pChild[$i],     size : $c.nChild ),
          Attributes: #array ( expr : $c.pAttribute[$i], size : $c.nAttribute ),
          Text:       #array ( expr : $c.pText[$i],      size : $c.nText ),
          Clear:      #array ( expr : $c.pClear[$i],     size : $c.nClear ),
          #if ( $c.pParent != 0) 
          ( #(
              parent: *($c.pParent)
          ))
        )
    )
}

ITCXMLNode{
    preview (
       #if ($c.d == 0) ("emptyXMLNode")
       #elif ((*$c.d).pName == 0) ("root node")
       #elif ((*$c.d).isProcessInstruction== 0)
           (#(
               "<",[(*$c.d).pName,sub],">, nChild=",(*$c.d).nChild,
               ", nAttr=",(*$c.d).nAttribute,", nText=",(*$c.d).nText,", nClear=",(*$c.d).nClear
           ))
       #else
           (#(
               "<?",[(*$c.d).pName,sub],"?>, nAttr=",(*$c.d).nAttribute
           ))
    )
    children (
        #(
;          [raw members]: [(*$c.d),!],
                      #array ( expr : (*($c.d)).pChild[$i],     size : (*($c.d)).nChild ),
          Attributes: #array ( expr : (*($c.d)).pAttribute[$i], size : (*($c.d)).nAttribute ),
          Text:       #array ( expr : (*($c.d)).pText[$i],      size : (*($c.d)).nText ),
          Clear:      #array ( expr : (*($c.d)).pClear[$i],     size : (*($c.d)).nClear ),
           #if ( (*($c.d)).pParent != 0) 
           ( #(
              parent: *((*($c.d)).pParent)
           ))
        )
    )
}

; Each time a XMLNode object is given as argument to a function, the computer calls the 
; "copy constructor" of the XMLNode object. Inside the debugger, this can be very annoying because
; each time you debug a function where you pass as argument a XMLNode object, you have to "enter" 
; and "go through" the "copy constructor" of the XMLNode class. Usually it means that you have to 
; press many, many times [F11] (and you enter the "copy constructor") and just after [Shift]+[F11]
; (and you exit the copy constructor). To prevent the debugger to always show you the code of the 
; "copy constructor" of the XMLNode class (which you don't care at all), add the following strings
; inside the registry:
;
;For Visual Studio 2005:
;  32 bit OS: go to: [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\8.0\NativeDE\StepOver]
;  64 bit OS: go to: [HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\8.0\NativeDE\StepOver]
;
;For Visual Studio 2008:
;  32 bit OS: go to: [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\NativeDE\StepOver]
;  64 bit OS: go to: [HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\9.0\NativeDE\StepOver]
;
; Add the following strings (give them any name):
; 	ITCXMLNode\:\:ITCXMLNode=NoStepInto
; 	ITCXMLNode\:\:~ITCXMLNode=NoStepInto
; 	ITCXMLNode\:\:operator==NoStepInto
; 	ICXMLNode\:\:ICXMLNode=NoStepInto
; 	ICXMLNode\:\:~ICXMLNode=NoStepInto
; 	ICXMLNode\:\:operator==NoStepInto
; 	IXMLNode\:\:IXMLNode=NoStepInto
; 	IXMLNode\:\:~IXMLNode=NoStepInto
; 	IXMLNode\:\:operator==NoStepInto
;
; For easier setup, I already prepared a .reg file for Visual Studio 2008 (64 bit OS) to do this:
; Rename the file "IXML_NoStepInto_VisualStudio2008_64BitOS.txt" into
;                 "IXML_NoStepInto_VisualStudio2008_64BitOS.reg" and double-click it.
